name: CI

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  REGISTRY: ${{vars.REGISTRY}}
  IMAGE_NAME: ${{vars.IMAGE_NAME}}
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

#3
jobs:
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
    - name: Checkout the repo 
      uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          backend:
            - 'backend/**'
            - '.github/workflows/**'
          frontend:
            - 'frontend/**'
            
  build-frontend:
      name: Build & Deploy frontend
      needs: changes
      if: ${{ needs.changes.outputs.frontend == 'true' }}
      defaults:
        run:
          working-directory: ./frontend
      runs-on: ubuntu-latest
      steps:
      - name: Flutter action
        uses: subosito/flutter-action@v2.16.0

      - name: Checkout the repo 
        uses: actions/checkout@v4
        with:
          channel: stable
          flutter-version: 3.19.0
      - run: | 
              flutter build web \
              --dart-define=KEYCLOAK_BASE_URL=https://bloc360.live:8443/realms/bloc360 \
              --dart-define=API_URL=https://bloc360.live:8080 \
              --dart-define=BASE_URL=https://bloc360.live \
              --dart-define=KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}

      - name: scp frontend files
        uses: appleboy/scp-action@v0.1.7
        with:
            host: ${{ secrets.SSH_HOST }}
            username: ${{ secrets.USERNAME }}
            port: ${{ secrets.PORT }}
            key: ${{ secrets.SSHKEY }}
            source: "./frontend/build/web/*"
            target: "/opt/persist/web"
            rm: true

  build_backend:
    name: Build backend
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repo
      - name: Checkout the repo
        uses: actions/checkout@v4

      # Step 2: Build backend container image
      - name: Build backend container image
        working-directory: ./backend
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: docker build -t $(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .

      # Step 3: Save Docker image to a file
      - name: Save Docker image to file
        run: docker save -o /tmp/$(echo $IMAGE_NAME)_$(echo $GITHUB_SHA | head -c7).tar $(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)

      # Step 4: Upload Docker image to server using SSH
      - name: Upload Docker image to server
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSHKEY }}
          source: /tmp/$(echo $IMAGE_NAME)_$(echo $GITHUB_SHA | head -c7).tar
          target: ~/$(echo $IMAGE_NAME)_$(echo $GITHUB_SHA | head -c7).tar

      # Step 5: SSH into server, remove old image, load new image, and run container
      - name: SSH and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSHKEY }}
          script: |
            # Stop and remove the old container
            docker stop $(docker ps -q --filter ancestor=$(echo $IMAGE_NAME)) || true
            docker rm $(docker ps -a -q --filter ancestor=$(echo $IMAGE_NAME)) || true

            # Remove the old image
            docker rmi $(echo $IMAGE_NAME) || true

            # Load the new image from the tar file
            docker load -i ~/$(echo $IMAGE_NAME)_$(echo $GITHUB_SHA | head -c7).tar

            # Start the new container
            docker run -d --name $(echo $IMAGE_NAME) \
            -p 8080:8080 \
            -e DB_URL=${{ secrets.DB_URL }} \
            -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
            -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e SSLCERTPASS=${{ secrets.SSLCERTPASS }} \
            -e KEYCLOAK_URL=${{ secrets.KEYCLOAK_URL }} \
            -e KEYCLOAK_REALM=${{ secrets.KEYCLOAK_REALM }} \
            -e KEYCLOAK_DOMAIN=${{ secrets.KEYCLOAK_DOMAIN }} \
            -e KEYCLOAK_ADMINCLIENTID=${{ secrets.KEYCLOAK_ADMINCLIENTID }} \
            -e KEYCLOAK_CLIENTSECRET=${{ secrets.KEYCLOAK_CLIENTSECRET }} \
            -e KEYCLOAK_CLIENT=${{ secrets.KEYCLOAK_CLIENT }} \
            -e KEYCLOAK_AUTH=${{ secrets.KEYCLOAK_AUTH }} \
            -e SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }} \
            --restart always \
            $(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
    